{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Download_file_Save_in_pkl","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"QK-gn303A9V8","colab_type":"code","outputId":"1337cd00-e3f3-419f-c471-7d52d3a16fb6","executionInfo":{"status":"ok","timestamp":1572781080026,"user_tz":-540,"elapsed":5644,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":62}},"source":["from google.colab import files\n","files.upload()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-9c1ce268-cc36-48ad-8969-47b42b517ee2\" name=\"files[]\" multiple disabled />\n","     <output id=\"result-9c1ce268-cc36-48ad-8969-47b42b517ee2\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["{}"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"Okm0K7uaB6V3","colab_type":"code","outputId":"a6cee642-ecd2-4456-cc38-7631e6be9add","executionInfo":{"status":"ok","timestamp":1572781083324,"user_tz":-540,"elapsed":8922,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["!mkdir -p ~/.kaggle\n","!mv kaggle.json ~/.kaggle/"],"execution_count":0,"outputs":[{"output_type":"stream","text":["mv: cannot stat 'kaggle.json': No such file or directory\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GtKvo30PB9We","colab_type":"code","outputId":"eaa3e8b1-1da3-4a02-be0b-72cf0008ed2c","executionInfo":{"status":"ok","timestamp":1572781084111,"user_tz":-540,"elapsed":9655,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from googleapiclient.discovery import build\n","import io, os\n","from googleapiclient.http import MediaIoBaseDownload\n","from google.colab import auth\n","\n","auth.authenticate_user()\n","\n","# drive_service = build('drive', 'v3')\n","results = drive_service.files().list(\n","        q=\"name = 'kaggle.json'\", fields=\"files(id)\").execute()\n","kaggle_api_key = results.get('files', [])\n","\n","filename = \"/content/.kaggle/kaggle.json\"\n","os.makedirs(os.path.dirname(filename), exist_ok=True)\n","\n","\n","\n","request = drive_service.files().get_media(fileId=kaggle_api_key[0]['id'])\n","fh = io.FileIO(filename, 'wb')\n","downloader = MediaIoBaseDownload(fh, request)\n","done = False\n","while done is False:\n","    status, done = downloader.next_chunk()\n","    print(\"Download %d%%.\" % int(status.progress() * 100))\n","os.chmod(filename, 600)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Download 100%.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_jF8b-faC0eT","colab_type":"code","outputId":"4fd463bf-859c-4138-ea72-ffc240b81fa3","executionInfo":{"status":"ok","timestamp":1572781088423,"user_tz":-540,"elapsed":13937,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":224}},"source":["!pip install kaggle"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: kaggle in /usr/local/lib/python3.6/dist-packages (1.5.6)\n","Requirement already satisfied: python-slugify in /usr/local/lib/python3.6/dist-packages (from kaggle) (4.0.0)\n","Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from kaggle) (1.24.3)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.6/dist-packages (from kaggle) (2019.9.11)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from kaggle) (4.28.1)\n","Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.6/dist-packages (from kaggle) (1.12.0)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.6/dist-packages (from kaggle) (2.6.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from kaggle) (2.21.0)\n","Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.6/dist-packages (from python-slugify->kaggle) (1.3)\n","Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->kaggle) (3.0.4)\n","Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->kaggle) (2.8)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MXHkwIdIHzn1","colab_type":"code","outputId":"0a1c9c4d-a95d-4252-be0d-03ed64b5d7e1","executionInfo":{"status":"ok","timestamp":1572781090201,"user_tz":-540,"elapsed":15669,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":445}},"source":["!kaggle competitions list"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Warning: Your Kaggle API key is readable by other users on this system! To fix this, you can run 'chmod 600 /root/.kaggle/kaggle.json'\n","Warning: Looks like you're using an outdated API Version, please consider updating (server 1.5.6 / client 1.5.4)\n","ref                                            deadline             category            reward  teamCount  userHasEntered  \n","---------------------------------------------  -------------------  ---------------  ---------  ---------  --------------  \n","digit-recognizer                               2030-01-01 00:00:00  Getting Started  Knowledge       2451           False  \n","titanic                                        2030-01-01 00:00:00  Getting Started  Knowledge      13489           False  \n","house-prices-advanced-regression-techniques    2030-01-01 00:00:00  Getting Started  Knowledge       4909           False  \n","imagenet-object-localization-challenge         2029-12-31 07:00:00  Research         Knowledge         56           False  \n","tensorflow2-question-answering                 2020-01-22 23:59:00  Featured           $50,000        251           False  \n","data-science-bowl-2019                         2020-01-22 23:59:00  Featured          $160,000        491           False  \n","pku-autonomous-driving                         2020-01-21 23:59:00  Featured           $25,000        119           False  \n","competitive-data-science-predict-future-sales  2019-12-31 23:59:00  Playground           Kudos       4684           False  \n","ashrae-energy-prediction                       2019-12-19 23:59:00  Featured           $25,000       1509            True  \n","Kannada-MNIST                                  2019-12-17 23:59:00  Playground       Knowledge        606           False  \n","bigquery-geotab-intersection-congestion        2019-12-12 23:59:00  Playground           Kudos        333           False  \n","cat-in-the-dat                                 2019-12-09 23:59:00  Playground            Swag        985           False  \n","nfl-big-data-bowl-2020                         2019-11-27 23:59:00  Featured           $75,000       1226           False  \n","understanding_cloud_organization               2019-11-18 23:59:00  Research           $10,000       1242           False  \n","3d-object-detection-for-autonomous-vehicles    2019-11-12 23:59:00  Featured           $25,000        488           False  \n","rsna-intracranial-hemorrhage-detection         2019-11-11 23:59:00  Featured           $25,000       1306           False  \n","severstal-steel-defect-detection               2019-10-24 23:59:00  Featured          $120,000       2434           False  \n","kuzushiji-recognition                          2019-10-14 23:59:00  Playground         $15,000        293           False  \n","youtube8m-2019                                 2019-10-11 23:59:00  Research           $25,000        283           False  \n","ieee-fraud-detection                           2019-10-03 23:59:00  Research           $20,000       6381           False  \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FEjqxD2xHzwb","colab_type":"code","outputId":"5d6b7b37-52e1-42f3-c1a0-c42d2edc9a90","executionInfo":{"status":"ok","timestamp":1572781099235,"user_tz":-540,"elapsed":24665,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":377}},"source":["!kaggle competitions download -c ashrae-energy-prediction"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Warning: Your Kaggle API key is readable by other users on this system! To fix this, you can run 'chmod 600 /root/.kaggle/kaggle.json'\n","Warning: Looks like you're using an outdated API Version, please consider updating (server 1.5.6 / client 1.5.4)\n","Downloading weather_train.csv.zip to /content\n","  0% 0.00/1.27M [00:00<?, ?B/s]\n","100% 1.27M/1.27M [00:00<00:00, 89.2MB/s]\n","Downloading sample_submission.csv.zip to /content\n"," 85% 75.0M/88.4M [00:00<00:00, 92.1MB/s]\n","100% 88.4M/88.4M [00:00<00:00, 114MB/s] \n","Downloading weather_test.csv.zip to /content\n","  0% 0.00/2.53M [00:00<?, ?B/s]\n","100% 2.53M/2.53M [00:00<00:00, 83.3MB/s]\n","Downloading building_metadata.csv to /content\n","  0% 0.00/44.5k [00:00<?, ?B/s]\n","100% 44.5k/44.5k [00:00<00:00, 44.6MB/s]\n","Downloading test.csv.zip to /content\n"," 90% 150M/167M [00:01<00:00, 85.4MB/s]\n","100% 167M/167M [00:01<00:00, 105MB/s] \n","Downloading train.csv.zip to /content\n"," 95% 114M/120M [00:01<00:00, 100MB/s]  \n","100% 120M/120M [00:01<00:00, 78.9MB/s]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lWhbwgh1JO-v","colab_type":"code","outputId":"c0ec99ca-95a7-4386-c251-b4261e00bc4d","executionInfo":{"status":"ok","timestamp":1572781118735,"user_tz":-540,"elapsed":44118,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"twvqVqcFHzsT","colab_type":"code","colab":{}},"source":["#Open zip-files and save the unziped files on the directory and del the original\n","import glob\n","import zipfile\n","import os\n","\n","\n","# Get only zip files\n","file_names = glob.glob(\"*.zip\")\n","for file in file_names:\n","    with zipfile.ZipFile(file) as existing_zip:\n","        existing_zip.extractall()\n","        # del zip files\n","        os.remove(file)\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2jWPRJ6SgOO7","colab_type":"text"},"source":["# Main part"]},{"cell_type":"markdown","metadata":{"id":"X-NAwa1lLF4e","colab_type":"text"},"source":["Minification.  \n","One of the first steps that should be done is data minification (just my opinion).\n","You will need it for:\n","\n","Load data faster -> pickle format (best choice for me)\n","Consume less memory -> Carefull types downcasting\n","Avoid repeated cleaning steps.\n","Possible problems:\n","\n","pandas pickle format is \"version dependent\" and you may have problems with loading data generated with a newer version of Pandas  \n","\n","Any bad transformation may and will affect your model. Minification should be done very veeeeery careful as you will use it in every single your kernel in the future. If you not sure about downcasting some column -> don't do. If not sure about cleaning -> don't do. All wrong decisions here may and will affect your score. You may spend days searching for error that prevents your model converge well and find that it was you who created an error in the minification step."]},{"cell_type":"code","metadata":{"id":"6Nec8YlzZ3Cm","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import os, warnings, math\n","\n","from tqdm import tqdm\n","from logging import getLogger\n","from sklearn.preprocessing import LabelEncoder\n","\n","# warnings.filterwarnings('ignore')\n","\n","\n","\n","TRAIN_DATA = 'train.csv'\n","TEST_DATA = 'test.csv'\n","\n","WEATHER_TRAIN_DATA = 'weather_train.csv'\n","WEATHER_TEST_DATA = 'weather_test.csv'\n","\n","METADATA = 'building_metadata.csv'\n","\n","SAMPLEDATA = 'sample_submission.csv'\n","\n","logger = getLogger(__name__)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jvMf695pZ286","colab_type":"code","colab":{}},"source":["def read_csv(path):\n","    logger.debug('enter')\n","    df = pd.read_csv(path)\n","    \"\"\"\n","    for col in tqdm(df.columns.values):\n","        if 'cat' in col:\n","            logger.info('categorical: {}'.format(col))\n","            tmp = pd.get_dummies(df[col], col)\n","            for col2 in tmp.columns.values:\n","                df[col2] = tmp[col2].values\n","            df.drop(col, axis=1, inplace=True)\n","    \"\"\"\n","    logger.debug('exit')\n","    return df\n","\n","def load_train_data():\n","    logger.debug('enter')\n","    df = read_csv(TRAIN_DATA)\n","    logger.debug('exit')\n","    return df\n","\n","def load_test_data():\n","    logger.debug('enter')\n","    df = read_csv(TEST_DATA)\n","    logger.debug('exit')\n","    return df\n","\n","def load_weather_train_data():\n","    logger.debug('enter')\n","    df = read_csv(WEATHER_TRAIN_DATA)\n","    logger.debug('exit')\n","    return df\n","\n","def load_weather_test_data():\n","    logger.debug('enter')\n","    df = read_csv(WEATHER_TEST_DATA)\n","    logger.debug('exit')\n","    return df\n","\n","def load_metadata():\n","    logger.debug('enter')\n","    df = read_csv(METADATA)\n","    logger.debug('exit')\n","    return df\n","\n","def load_sampledata():\n","    logger.debug('enter')\n","    df = read_csv(SAMPLEDATA)\n","    logger.debug('exit')\n","    return df  \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"est5R1vRZ3Ar","colab_type":"code","colab":{}},"source":["########################### DATA LOAD\n","#################################################################################\n","train_df = load_train_data()\n","test_df = load_test_data()\n","\n","building_df = load_metadata()\n","\n","train_weather_df = load_weather_train_data()\n","test_weather_df = load_weather_test_data()\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EKQPMzseFtjR","colab_type":"code","colab":{}},"source":["########################### Check building_id \n","#################################################################################\n","temp_df = test_df[~test_df['building_id'].isin(train_df['building_id'])]\n","print('No intersection:', len(temp_df))\n","del test_df"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_P-8LjmslRFu","colab_type":"code","outputId":"eb98f926-d256-493d-deff-d7a1e4e83a7f","executionInfo":{"status":"ok","timestamp":1572781156597,"user_tz":-540,"elapsed":81850,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["train_df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>building_id</th>\n","      <th>meter</th>\n","      <th>timestamp</th>\n","      <th>meter_reading</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2016-01-01 00:00:00</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2016-01-01 00:00:00</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2016-01-01 00:00:00</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2016-01-01 00:00:00</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>2016-01-01 00:00:00</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   building_id  meter            timestamp  meter_reading\n","0            0      0  2016-01-01 00:00:00            0.0\n","1            1      0  2016-01-01 00:00:00            0.0\n","2            2      0  2016-01-01 00:00:00            0.0\n","3            3      0  2016-01-01 00:00:00            0.0\n","4            4      0  2016-01-01 00:00:00            0.0"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"0ZD9OsrNo14r","colab_type":"code","outputId":"2c83f462-89ef-4cdc-c62c-b8fb6538201f","executionInfo":{"status":"ok","timestamp":1572781160588,"user_tz":-540,"elapsed":85826,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":315}},"source":["#distribution of id\n","train_df[['building_id']].hist(bins=int(train_df[['building_id']].max()))"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7fd5de7aaba8>]],\n","      dtype=object)"]},"metadata":{"tags":[]},"execution_count":18},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"6MkNwSIZls5y","colab_type":"code","outputId":"651be3e8-ba04-4422-fe7b-437519dea715","executionInfo":{"status":"ok","timestamp":1572781160589,"user_tz":-540,"elapsed":85797,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["building_df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>site_id</th>\n","      <th>building_id</th>\n","      <th>primary_use</th>\n","      <th>square_feet</th>\n","      <th>year_built</th>\n","      <th>floor_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Education</td>\n","      <td>7432</td>\n","      <td>2008.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Education</td>\n","      <td>2720</td>\n","      <td>2004.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Education</td>\n","      <td>5376</td>\n","      <td>1991.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Education</td>\n","      <td>23685</td>\n","      <td>2002.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>Education</td>\n","      <td>116607</td>\n","      <td>1975.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   site_id  building_id primary_use  square_feet  year_built  floor_count\n","0        0            0   Education         7432      2008.0          NaN\n","1        0            1   Education         2720      2004.0          NaN\n","2        0            2   Education         5376      1991.0          NaN\n","3        0            3   Education        23685      2002.0          NaN\n","4        0            4   Education       116607      1975.0          NaN"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"2JjIUxIGp_S-","colab_type":"code","outputId":"91bceb86-3e73-4e0d-e63e-aefd9b482425","executionInfo":{"status":"ok","timestamp":1572781164164,"user_tz":-540,"elapsed":89348,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":315}},"source":["#distribution of id\n","building_df[['building_id']].hist(bins=int(train_df[['building_id']].max()))"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7fd5dbc74320>]],\n","      dtype=object)"]},"metadata":{"tags":[]},"execution_count":20},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAXoAAAEICAYAAABRSj9aAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAYuElEQVR4nO3df5TddX3n8edrQ8KvuBBMHTGJJNRs\nCyU1MLMBj7s6YyEEjkuOLacmm2KwzZmua2qr0BbKCm6k50DV1kWoIcdGrAczKIrEnLQxhbDUY3GT\n2EASaGAIsSSCUUOjAQ44+N4/7ifwzfXe3O/c+c6dyaevxzn3zPf7+Xy+3+/7fpN5zb3f+73fryIC\nMzPL138Y6wLMzGx0OejNzDLnoDczy5yD3swscw56M7PMOejNzDLnoLdjiqQ9ki5sY7mVkj6apnsl\n7T3K2Dsk3Zim/6ukXe1XPLzamvSHpLeMZg2Wt+PGugCzToiI/9Hmcv8I/ErF5dRvo63azMryK3oz\ns8w56O1Y9J8lPSrpOUmfl3SCpCslfas4qHjIo3g4pp6kcyV9V9JPJd0FnFDoO+IwTzp0dLWkRyQd\nlHSXpOL4P5H0jKTvS1pW5rBLfW2S/riwjt8d9t4xq+Ogt2PREuBi4JeB/wT8r3ZXJGkS8HXgi8Bp\nwFeA32qx2G8DC4BZwK8DV6Z1LQA+AlwIvAXobaOeBcDVwEXA7LQusxFx0Nux6NaIeDoiDgB/Diwe\nwbouACYCn46In0XE3cDmFsvcEhHfT9v/BjA3tf828PmI2BkRLwAfa6Oew+vYERHPt7kOsyM46O1Y\n9HRh+nvAm0awrjcB++LIq/t9r8UyzxamXwAmF9ZVrK04PZx66p+f2Yg46O1YNKMw/Wbg+8DzwEmH\nGyW9seS6ngGmSVLdOtvxDDC9SZ3DWUf98zMbEQe9HYs+KGm6pNOA64C7gIeBX5M0N304+rGS6/on\nYAj4kKSJkn4TmNdmXV8G3i/pLEknAU3PjW+xjislnZ3WcUObtZi9ykFvx6IvAd8EdgNPAjdGxOPA\nCuAfgCeAbzVf/DUR8TLwm9Q+UD0AvBf4WjtFRcTfAbcAm4BB4KHU9dIw1/Fp4P60jvvbqcWsSL7x\niNnokHQWsAM4PiKGxroe+/fLr+jNKiTpPZKOlzQFuBn4hkPexpqD3qxavw/sp3ZI6RXgAwCSdko6\n1OCxZCyLtX8ffOjGzCxzfkVvZpa5cXn1yqlTp8bMmTPbWvb555/n5JNPrragUeA6q+U6q+U6q9WJ\nOrdu3fqjiPilhp0RMe4e3d3d0a5Nmza1vWwnuc5quc5quc5qdaJOYEs0yVQfujEzy5yD3swscw56\nM7PMOejNzDLnoDczy5yD3swscy2DXtIMSZvSPTp3SvrDBmMk6RZJg+lemucV+pZKeiI9llb9BMzM\n7OjKfGFqCLgqIr4r6XXAVkkbI+LRwphLqN3fcjZwPvBZ4Px0vfAbgB4g0rJrI+K5Sp+FmZk11fIV\nfUQ8ExHfTdM/BR4DptUNWwj8bTpv/yHgVEmnU7uB88aIOJDCfSO1myqbmVmHDOuiZpJmAg8C50TE\nTwrt64CbIuJbaf4+4E+BXuCEiLgxtX8UeDEiPtlg3f1AP0BXV1f3wMBAW0/o0KFDTJ48ufXAMeY6\nq+U6q+U6q9WJOvv6+rZGRE+jvtLXupE0Gfgq8EfFkK9KRKwCVgH09PREb29vW+t54IEHaHfZTnKd\n1XKd1XKd1RrrOkuddSNpIrWQvzMiGt1mbR9H3tB4empr1m5mZh1S5qwbAX8DPBYRf9lk2Frgfens\nmwuAgxHxDLABmC9pSrrjzvzUZmZmHVLm0M3bgSuA7ZK2pbY/A94MEBErgfXApdRuZvwC8P7Ud0DS\nx4HNabkVEXGguvLNzKyVlkGfPmBVizEBfLBJ32pgdVvVmZnZiPmbsWZmmXPQm5llzkFvZpY5B72Z\nWeYc9GZmmXPQm5llzkFvZpY5B72ZWeYc9GZmmXPQm5llzkFvZpY5B72ZWeYc9GZmmXPQm5llzkFv\nZpY5B72ZWeZa3nhE0mrg3cD+iDinQf8fA0sK6zsL+KV0d6k9wE+BV4ChZncoNzOz0VPmFf0dwIJm\nnRHxiYiYGxFzgWuB/1t3u8C+1O+QNzMbAy2DPiIeBMre53UxsGZEFZmZWaUqO0Yv6SRqr/y/WmgO\n4JuStkrqr2pbZmZWnmr39W4xSJoJrGt0jL4w5r3A70TEfyu0TYuIfZLeAGwE/iC9Q2i0fD/QD9DV\n1dU9MDAwnOfxqkOHDjF58uS2lu0k11kt11kt11mtTtTZ19e3tekh8oho+QBmAjtajLkH+O9H6f8Y\ncHWZ7XV3d0e7Nm3a1PayneQ6q+U6q+U6q9WJOoEt0SRTKzl0I+kU4J3AvYW2kyW97vA0MB/YUcX2\nzMysvDKnV64BeoGpkvYCNwATASJiZRr2HuCbEfF8YdEu4B5Jh7fzpYj4++pKNzOzMloGfUQsLjHm\nDmqnYRbbdgNvbbcwMzOrhr8Za2aWOQe9mVnmHPRmZplz0JuZZc5Bb2aWOQe9mVnmHPRmZplz0JuZ\nZc5Bb2aWOQe9mVnmHPRmZplz0JuZZc5Bb2aWOQe9mVnmHPRmZplz0JuZZc5Bb2aWuZZBL2m1pP2S\nGt7vVVKvpIOStqXH9YW+BZJ2SRqUdE2VhZuZWTllXtHfASxoMeYfI2JueqwAkDQBuA24BDgbWCzp\n7JEUa2Zmw9cy6CPiQeBAG+ueBwxGxO6IeBkYABa2sR4zMxsBRUTrQdJMYF1EnNOgrxf4KrAX+D5w\ndUTslHQ5sCAilqVxVwDnR8TyJtvoB/oBurq6ugcGBtp5Phw6dIjJkye3tWwnuc5quc5quc5qdaLO\nvr6+rRHR07AzIlo+gJnAjiZ9/xGYnKYvBZ5I05cDnyuMuwK4tcz2uru7o12bNm1qe9lOcp3Vcp3V\ncp3V6kSdwJZokqkjPusmIn4SEYfS9HpgoqSpwD5gRmHo9NRmZmYdNOKgl/RGSUrT89I6fwxsBmZL\nmiVpErAIWDvS7ZmZ2fAc12qApDVALzBV0l7gBmAiQESspHaI5gOShoAXgUXpbcSQpOXABmACsDoi\ndo7KszAzs6ZaBn1ELG7Rfytwa5O+9cD69kozM7Mq+JuxZmaZc9CbmWXOQW9mljkHvZlZ5hz0ZmaZ\nc9CbmWXOQW9mljkHvZlZ5hz0ZmaZc9CbmWXOQW9mljkHvZlZ5hz0ZmaZc9CbmWXOQW9mljkHvZlZ\n5hz0ZmaZaxn0klZL2i9pR5P+JZIekbRd0rclvbXQtye1b5O0pcrCzcysnDKv6O8AFhyl/yngnREx\nB/g4sKquvy8i5kZET3slmpnZSJS5Z+yDkmYepf/bhdmHgOkjL8vMzKqiiGg9qBb06yLinBbjrgZ+\nNSKWpfmngOeAAG6PiPpX+8Vl+4F+gK6uru6BgYGST+FIhw4dYvLkyW0t20mus1qus1qus1qdqLOv\nr29r0yMnEdHyAcwEdrQY0wc8Bry+0DYt/XwD8DDwjjLb6+7ujnZt2rSp7WU7yXVWy3VWy3VWqxN1\nAluiSaZWctaNpF8HPgcsjIgfF/6I7Es/9wP3APOq2J6ZmZU34qCX9Gbga8AVEfF4of1kSa87PA3M\nBxqeuWNmZqOn5YexktYAvcBUSXuBG4CJABGxErgeeD3w15IAhqJ2nKgLuCe1HQd8KSL+fhSeg5mZ\nHUWZs24Wt+hfBixr0L4beOsvLmFmZp3kb8aamWXOQW9mljkHvZlZ5hz0ZmaZc9CbmWXOQW9mljkH\nvZlZ5hz0ZmaZc9CbmWXOQW9mljkHvZlZ5hz0ZmaZc9CbmWXOQW9mljkHvZlZ5hz0ZmaZc9CbmWWu\nVNBLWi1pv6SG93xVzS2SBiU9Ium8Qt9SSU+kx9KqCjczs3LKvqK/A1hwlP5LgNnp0Q98FkDSadTu\nMXs+MA+4QdKUdos1M7PhKxX0EfEgcOAoQxYCfxs1DwGnSjoduBjYGBEHIuI5YCNH/4NhZmYVU0SU\nGyjNBNZFxDkN+tYBN0XEt9L8fcCfAr3ACRFxY2r/KPBiRHyywTr6qb0boKurq3tgYKCNpwP7Dxzk\nBy+2tWhHdZ2I66yQ66yW66xW2TrnTDul7W309fVtjYieRn3Htb3WikXEKmAVQE9PT/T29ra1ns/c\neS+f2j5unlZTV80Zcp0Vcp3Vcp3VKlvnniW9o7L9qs662QfMKMxPT23N2s3MrEOqCvq1wPvS2TcX\nAAcj4hlgAzBf0pT0Iez81GZmZh1S6j2PpDXUjrdPlbSX2pk0EwEiYiWwHrgUGAReAN6f+g5I+jiw\nOa1qRUQc7UNdMzOrWKmgj4jFLfoD+GCTvtXA6uGXZmZmVfA3Y83MMuegNzPLnIPezCxzDnozs8w5\n6M3MMuegNzPLnIPezCxzDnozs8w56M3MMuegNzPLnIPezCxzDnozs8w56M3MMuegNzPLnIPezCxz\nDnozs8w56M3MMlcq6CUtkLRL0qCkaxr0/5WkbenxuKR/K/S9UuhbW2XxZmbWWstbCUqaANwGXATs\nBTZLWhsRjx4eExEfLoz/A+DcwipejIi51ZVsZmbDUeYV/TxgMCJ2R8TLwACw8CjjFwNrqijOzMxG\nTrX7eh9lgHQ5sCAilqX5K4DzI2J5g7FnAA8B0yPildQ2BGwDhoCbIuLrTbbTD/QDdHV1dQ8MDLT1\nhPYfOMgPXmxr0Y7qOhHXWSHXWS3XWa2ydc6Zdkrb2+jr69saET2N+loeuhmmRcDdh0M+OSMi9kk6\nE7hf0vaIeLJ+wYhYBawC6Onpid7e3rYK+Myd9/Kp7VU/repdNWfIdVbIdVbLdVarbJ17lvSOyvbL\nHLrZB8wozE9PbY0sou6wTUTsSz93Aw9w5PF7MzMbZWWCfjMwW9IsSZOohfkvnD0j6VeBKcA/Fdqm\nSDo+TU8F3g48Wr+smZmNnpbvJSJiSNJyYAMwAVgdETslrQC2RMTh0F8EDMSRB/3PAm6X9HNqf1Ru\nKp6tY2Zmo6/Uwa2IWA+sr2u7vm7+Yw2W+zYwZwT1mZnZCPmbsWZmmXPQm5llzkFvZpY5B72ZWeYc\n9GZmmXPQm5llzkFvZpY5B72ZWeYc9GZmmXPQm5llzkFvZpY5B72ZWeYc9GZmmXPQm5llzkFvZpY5\nB72ZWeYc9GZmmSsV9JIWSNolaVDSNQ36r5T0Q0nb0mNZoW+ppCfSY2mVxZuZWWstbyUoaQJwG3AR\nsBfYLGltg3u/3hURy+uWPQ24AegBAtialn2ukurNzKylMq/o5wGDEbE7Il4GBoCFJdd/MbAxIg6k\ncN8ILGivVDMza0eZm4NPA54uzO8Fzm8w7rckvQN4HPhwRDzdZNlpjTYiqR/oB+jq6uKBBx4oUdov\n6joRrpoz1NayneQ6q+U6q+U6q1W2znZzr5UyQV/GN4A1EfGSpN8HvgC8azgriIhVwCqAnp6e6O3t\nbauQz9x5L5/aXtXTGj1XzRlynRVyndVyndUqW+eeJb2jsv0yh272ATMK89NT26si4scR8VKa/RzQ\nXXZZMzMbXWWCfjMwW9IsSZOARcDa4gBJpxdmLwMeS9MbgPmSpkiaAsxPbWZm1iEt30tExJCk5dQC\negKwOiJ2SloBbImItcCHJF0GDAEHgCvTsgckfZzaHwuAFRFxYBSeh5mZNVHq4FZErAfW17VdX5i+\nFri2ybKrgdUjqNHMzEbA34w1M8ucg97MLHMOejOzzDnozcwy56A3M8ucg97MLHMOejOzzDnozcwy\n56A3M8ucg97MLHMOejOzzDnozcwy56A3M8ucg97MLHMOejOzzDnozcwy56A3M8tcqaCXtEDSLkmD\nkq5p0P8RSY9KekTSfZLOKPS9ImlbeqytX9bMzEZXy1sJSpoA3AZcBOwFNktaGxGPFob9M9ATES9I\n+gDwF8B7U9+LETG34rrNzKykMq/o5wGDEbE7Il4GBoCFxQERsSkiXkizDwHTqy3TzMzapYg4+gDp\ncmBBRCxL81cA50fE8ibjbwWejYgb0/wQsA0YAm6KiK83Wa4f6Afo6urqHhgYaOsJ7T9wkB+82Nai\nHdV1Iq6zQq6zWq6zWmXrnDPtlLa30dfXtzUiehr1tTx0MxySfgfoAd5ZaD4jIvZJOhO4X9L2iHiy\nftmIWAWsAujp6Yne3t62avjMnffyqe2VPq1RcdWcIddZIddZLddZrbJ17lnSOyrbL3PoZh8wozA/\nPbUdQdKFwHXAZRHx0uH2iNiXfu4GHgDOHUG9ZmY2TGWCfjMwW9IsSZOARcARZ89IOhe4nVrI7y+0\nT5F0fJqeCrwdKH6Ia2Zmo6zle4mIGJK0HNgATABWR8ROSSuALRGxFvgEMBn4iiSAf42Iy4CzgNsl\n/ZzaH5Wb6s7WMTOzUVbq4FZErAfW17VdX5i+sMly3wbmjKRAMzMbGX8z1swscw56M7PMOejNzDLn\noDczy5yD3swscw56M7PMOejNzDLnoDczy5yD3swscw56M7PMOejNzDLnoDczy5yD3swscw56M7PM\nOejNzDLnoDczy5yD3swsc6WCXtICSbskDUq6pkH/8ZLuSv3fkTSz0Hdtat8l6eLqSjczszJaBr2k\nCcBtwCXA2cBiSWfXDfs94LmIeAvwV8DNadmzqd1M/NeABcBfp/WZmVmHlHlFPw8YjIjdEfEyMAAs\nrBuzEPhCmr4b+A3V7hK+EBiIiJci4ilgMK3PzMw6pMzNwacBTxfm9wLnNxsTEUOSDgKvT+0P1S07\nrdFGJPUD/Wn2kKRdJWprZCrwozaX7ZgPuc5Kuc5quc5qla1TN49oM2c06ygT9B0REauAVSNdj6Qt\nEdFTQUmjynVWy3VWy3VWa6zrLHPoZh8wozA/PbU1HCPpOOAU4McllzUzs1FUJug3A7MlzZI0idqH\nq2vrxqwFlqbpy4H7IyJS+6J0Vs4sYDbw/6op3czMymh56CYdc18ObAAmAKsjYqekFcCWiFgL/A3w\nRUmDwAFqfwxI474MPAoMAR+MiFdG6bkcNuLDPx3iOqvlOqvlOqs1pnWq9sLbzMxy5W/GmpllzkFv\nZpa5bIK+1WUaOlzLDEmbJD0qaaekP0ztp0naKOmJ9HNKapekW1Ltj0g6r8P1TpD0z5LWpflZ6VIW\ng+nSFpNSe9NLXXSgxlMl3S3pXyQ9Jult43F/Svpw+jffIWmNpBPGy/6UtFrSfkk7Cm3D3oeSlqbx\nT0ha2mhbo1DnJ9K//SOS7pF0aqGv4WVWRjsTGtVZ6LtKUkiamubHbH8CEBHH/IPah8RPAmcCk4CH\ngbPHsJ7TgfPS9OuAx6ldPuIvgGtS+zXAzWn6UuDvAAEXAN/pcL0fAb4ErEvzXwYWpemVwAfS9P8E\nVqbpRcBdHazxC8CyND0JOHW87U9qXwZ8CjixsB+vHC/7E3gHcB6wo9A2rH0InAbsTj+npOkpHahz\nPnBcmr65UOfZ6ff9eGBWyoEJnciERnWm9hnUTl75HjB1rPdnRGQT9G8DNhTmrwWuHeu6CvXcC1wE\n7AJOT22nA7vS9O3A4sL4V8d1oLbpwH3Au4B16T/ijwq/VK/u2/Sf921p+rg0Th2o8ZQUoKprH1f7\nk9e+IX5a2j/rgIvH0/4EZtYF6LD2IbAYuL3QfsS40aqzru89wJ1p+ojf9cP7tFOZ0KhOapeBeSuw\nh9eCfkz3Zy6HbhpdpqHhpRY6Lb0dPxf4DtAVEc+krmeBrjQ9lvV/GvgT4Odp/vXAv0XEUINajrjU\nBXD4UhejbRbwQ+Dz6RDT5ySdzDjbnxGxD/gk8K/AM9T2z1bG3/4sGu4+HA+/a79L7dUxR6lnTOqU\ntBDYFxEP13WNaZ25BP24JGky8FXgjyLiJ8W+qP35HtNzWyW9G9gfEVvHso4SjqP2FvmzEXEu8Dy1\nwwyvGif7cwq1C/nNAt4EnEztqq3HhPGwD1uRdB217+TcOda11JN0EvBnwPVjXUu9XIJ+3F1qQdJE\naiF/Z0R8LTX/QNLpqf90YH9qH6v63w5cJmkPtauSvgv4P8Cpql3Kor6WZpe6GG17gb0R8Z00fze1\n4B9v+/NC4KmI+GFE/Az4GrV9PN72Z9Fw9+GY/a5JuhJ4N7Ak/VHiKPWMRZ2/TO2P/MPpd2o68F1J\nbxzrOnMJ+jKXaegYSaL2beHHIuIvC13FS0UspXbs/nD7+9In8xcABwtvp0dNRFwbEdMjYia1fXZ/\nRCwBNlG7lEWjOhtd6mK063wWeFrSr6Sm36D2betxtT+pHbK5QNJJ6f/A4TrH1f6sM9x9uAGYL2lK\negczP7WNKkkLqB1ivCwiXqirv9FlVjqeCRGxPSLeEBEz0+/UXmonZTzLWO/Pqg/6j9WD2qfaj1P7\npP26Ma7lv1B7C/wIsC09LqV2/PU+4AngH4DT0nhRu7nLk8B2oGcMau7ltbNuzqT2yzIIfAU4PrWf\nkOYHU/+ZHaxvLrAl7dOvUztDYdztT+B/A/8C7AC+SO1skHGxP4E11D47+Bm1EPq9dvYhtWPkg+nx\n/g7VOUjtWPbh36eVhfHXpTp3AZcU2kc1ExrVWde/h9c+jB2z/RkRvgSCmVnucjl0Y2ZmTTjozcwy\n56A3M8ucg97MLHMOejOzzDnozcwy56A3M8vc/welBYYiBFz5+gAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"WNNimVqj7tMp","colab_type":"code","outputId":"df1d2a52-6c1a-423e-d7e3-7341c04994b0","executionInfo":{"status":"ok","timestamp":1572781168477,"user_tz":-540,"elapsed":93647,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":315}},"source":["train_df[['building_id']].hist(bins=int(train_df[['building_id']].max()))"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7fd5dcb32470>]],\n","      dtype=object)"]},"metadata":{"tags":[]},"execution_count":21},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"thJ4PORLlwMi","colab_type":"code","outputId":"3634eda8-d910-429a-e08f-c28f5c98cb98","executionInfo":{"status":"ok","timestamp":1572781168479,"user_tz":-540,"elapsed":93621,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"source":["train_weather_df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>site_id</th>\n","      <th>timestamp</th>\n","      <th>air_temperature</th>\n","      <th>cloud_coverage</th>\n","      <th>dew_temperature</th>\n","      <th>precip_depth_1_hr</th>\n","      <th>sea_level_pressure</th>\n","      <th>wind_direction</th>\n","      <th>wind_speed</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2016-01-01 00:00:00</td>\n","      <td>25.0</td>\n","      <td>6.0</td>\n","      <td>20.0</td>\n","      <td>NaN</td>\n","      <td>1019.7</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>2016-01-01 01:00:00</td>\n","      <td>24.4</td>\n","      <td>NaN</td>\n","      <td>21.1</td>\n","      <td>-1.0</td>\n","      <td>1020.2</td>\n","      <td>70.0</td>\n","      <td>1.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>2016-01-01 02:00:00</td>\n","      <td>22.8</td>\n","      <td>2.0</td>\n","      <td>21.1</td>\n","      <td>0.0</td>\n","      <td>1020.2</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>2016-01-01 03:00:00</td>\n","      <td>21.1</td>\n","      <td>2.0</td>\n","      <td>20.6</td>\n","      <td>0.0</td>\n","      <td>1020.1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>2016-01-01 04:00:00</td>\n","      <td>20.0</td>\n","      <td>2.0</td>\n","      <td>20.0</td>\n","      <td>-1.0</td>\n","      <td>1020.0</td>\n","      <td>250.0</td>\n","      <td>2.6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   site_id            timestamp  ...  wind_direction  wind_speed\n","0        0  2016-01-01 00:00:00  ...             0.0         0.0\n","1        0  2016-01-01 01:00:00  ...            70.0         1.5\n","2        0  2016-01-01 02:00:00  ...             0.0         0.0\n","3        0  2016-01-01 03:00:00  ...             0.0         0.0\n","4        0  2016-01-01 04:00:00  ...           250.0         2.6\n","\n","[5 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"OgaKcjq2hWum","colab_type":"code","outputId":"49bf4132-755b-4b72-9921-f13dc999b4ed","executionInfo":{"status":"ok","timestamp":1572781168482,"user_tz":-540,"elapsed":93567,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":717}},"source":["########################### Data Check\n","#################################################################################\n","print('Main data:', list(train_df), train_df.info())\n","print('#'*20)\n","\n","print('Buildings data:',list(building_df), building_df.info())\n","print('#'*20)\n","\n","print('Weather data:',list(train_weather_df), train_weather_df.info())\n","print('#'*20)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 20216100 entries, 0 to 20216099\n","Data columns (total 4 columns):\n","building_id      int64\n","meter            int64\n","timestamp        object\n","meter_reading    float64\n","dtypes: float64(1), int64(2), object(1)\n","memory usage: 616.9+ MB\n","Main data: ['building_id', 'meter', 'timestamp', 'meter_reading'] None\n","####################\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1449 entries, 0 to 1448\n","Data columns (total 6 columns):\n","site_id        1449 non-null int64\n","building_id    1449 non-null int64\n","primary_use    1449 non-null object\n","square_feet    1449 non-null int64\n","year_built     675 non-null float64\n","floor_count    355 non-null float64\n","dtypes: float64(2), int64(3), object(1)\n","memory usage: 68.0+ KB\n","Buildings data: ['site_id', 'building_id', 'primary_use', 'square_feet', 'year_built', 'floor_count'] None\n","####################\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 139773 entries, 0 to 139772\n","Data columns (total 9 columns):\n","site_id               139773 non-null int64\n","timestamp             139773 non-null object\n","air_temperature       139718 non-null float64\n","cloud_coverage        70600 non-null float64\n","dew_temperature       139660 non-null float64\n","precip_depth_1_hr     89484 non-null float64\n","sea_level_pressure    129155 non-null float64\n","wind_direction        133505 non-null float64\n","wind_speed            139469 non-null float64\n","dtypes: float64(7), int64(1), object(1)\n","memory usage: 9.6+ MB\n","Weather data: ['site_id', 'timestamp', 'air_temperature', 'cloud_coverage', 'dew_temperature', 'precip_depth_1_hr', 'sea_level_pressure', 'wind_direction', 'wind_speed'] None\n","####################\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7dFfkhzDhWym","colab_type":"code","colab":{}},"source":["\n","# ########################### Convert timestamp to date \n","# #################################################################################\n","for df in [train_df, test_df, train_weather_df, test_weather_df]:\n","    df['timestamp'] = pd.to_datetime(df['timestamp'])\n","\n","# !!!!!!!!\n","# I'll impriment these codes after concatnating weather_df and train/test_df    \n","# for df in [train_df, test_df]:\n","#     df['DT_M'] = df['timestamp'].dt.month.astype(np.int8)\n","#     df['DT_W'] = df['timestamp'].dt.weekofyear.astype(np.int8)\n","#     df['DT_D'] = df['timestamp'].dt.dayofyear.astype(np.int16)\n","    \n","#     df['DT_hour'] = df['timestamp'].dt.hour.astype(np.int8)\n","#     df['DT_day_week'] = df['timestamp'].dt.dayofweek.astype(np.int8)\n","#     df['DT_day_month'] = df['timestamp'].dt.day.astype(np.int8)\n","#     df['DT_week_month'] = df['timestamp'].dt.day/7\n","#     df['DT_week_month'] = df['DT_week_month'].apply(lambda x: math.ceil(x)).astype(np.int8)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nrGHw3CUhW_k","colab_type":"code","outputId":"994f7266-e7f4-493f-9ca4-b78030d1754c","executionInfo":{"status":"ok","timestamp":1572781204352,"user_tz":-540,"elapsed":680,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"source":["df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>site_id</th>\n","      <th>timestamp</th>\n","      <th>air_temperature</th>\n","      <th>cloud_coverage</th>\n","      <th>dew_temperature</th>\n","      <th>precip_depth_1_hr</th>\n","      <th>sea_level_pressure</th>\n","      <th>wind_direction</th>\n","      <th>wind_speed</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2017-01-01 00:00:00</td>\n","      <td>17.8</td>\n","      <td>4.0</td>\n","      <td>11.7</td>\n","      <td>NaN</td>\n","      <td>1021.4</td>\n","      <td>100.0</td>\n","      <td>3.6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>2017-01-01 01:00:00</td>\n","      <td>17.8</td>\n","      <td>2.0</td>\n","      <td>12.8</td>\n","      <td>0.0</td>\n","      <td>1022.0</td>\n","      <td>130.0</td>\n","      <td>3.1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>2017-01-01 02:00:00</td>\n","      <td>16.1</td>\n","      <td>0.0</td>\n","      <td>12.8</td>\n","      <td>0.0</td>\n","      <td>1021.9</td>\n","      <td>140.0</td>\n","      <td>3.1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>2017-01-01 03:00:00</td>\n","      <td>17.2</td>\n","      <td>0.0</td>\n","      <td>13.3</td>\n","      <td>0.0</td>\n","      <td>1022.2</td>\n","      <td>140.0</td>\n","      <td>3.1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>2017-01-01 04:00:00</td>\n","      <td>16.7</td>\n","      <td>2.0</td>\n","      <td>13.3</td>\n","      <td>0.0</td>\n","      <td>1022.3</td>\n","      <td>130.0</td>\n","      <td>2.6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   site_id           timestamp  ...  wind_direction  wind_speed\n","0        0 2017-01-01 00:00:00  ...           100.0         3.6\n","1        0 2017-01-01 01:00:00  ...           130.0         3.1\n","2        0 2017-01-01 02:00:00  ...           140.0         3.1\n","3        0 2017-01-01 03:00:00  ...           140.0         3.1\n","4        0 2017-01-01 04:00:00  ...           130.0         2.6\n","\n","[5 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"BYjk2PymhXDQ","colab_type":"code","colab":{}},"source":["########################### Strings to category\n","#################################################################################\n","building_df['primary_use'] = building_df['primary_use'].astype('category')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qXqDzEoAhW98","colab_type":"code","colab":{}},"source":["########################### Building Transform\n","#################################################################################\n","#Maybe you can try not filling blanks with 0 if you use Xgboost kind of models.\n","building_df['floor_count'] = building_df['floor_count'].fillna(0).astype(np.int8)\n","building_df['year_built'] = building_df['year_built'].fillna(-999).astype(np.int16)\n","\n","le = LabelEncoder()\n","building_df['primary_use'] = building_df['primary_use'].astype(str)\n","building_df['primary_use'] = le.fit_transform(building_df['primary_use']).astype(np.int8)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Thf2hYa5hW53","colab_type":"code","outputId":"df17a8f6-38a0-463a-c75c-7b69878e89e2","executionInfo":{"status":"ok","timestamp":1572781204364,"user_tz":-540,"elapsed":652,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["building_df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>site_id</th>\n","      <th>building_id</th>\n","      <th>primary_use</th>\n","      <th>square_feet</th>\n","      <th>year_built</th>\n","      <th>floor_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7432</td>\n","      <td>2008</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2720</td>\n","      <td>2004</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>5376</td>\n","      <td>1991</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>23685</td>\n","      <td>2002</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>116607</td>\n","      <td>1975</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   site_id  building_id  primary_use  square_feet  year_built  floor_count\n","0        0            0            0         7432        2008            0\n","1        0            1            0         2720        2004            0\n","2        0            2            0         5376        1991            0\n","3        0            3            0        23685        2002            0\n","4        0            4            0       116607        1975            0"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"KDeuGeqdpKW6","colab_type":"code","colab":{}},"source":["########################### Helpers\n","#################################################################################\n","## -------------------\n","## Memory Reducer\n","# :df pandas dataframe to reduce size             # type: pd.DataFrame()\n","# :verbose                                        # type: bool\n","def reduce_mem_usage(df, verbose=True):\n","    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n","    start_mem = df.memory_usage().sum() / 1024**2    \n","    for col in df.columns:\n","        col_type = df[col].dtypes\n","        if col_type in numerics:\n","            c_min = df[col].min()\n","            c_max = df[col].max()\n","            if str(col_type)[:3] == 'int':\n","                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n","                    df[col] = df[col].astype(np.int8)\n","                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n","                    df[col] = df[col].astype(np.int16)\n","                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n","                    df[col] = df[col].astype(np.int32)\n","                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n","                    df[col] = df[col].astype(np.int64)  \n","            else:\n","                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","                    df[col] = df[col].astype(np.float16)\n","                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n","                    df[col] = df[col].astype(np.float32)\n","                else:\n","                    df[col] = df[col].astype(np.float64)    \n","    end_mem = df.memory_usage().sum() / 1024**2\n","    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))\n","    return df\n","## -------------------"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"koogQvflhW3A","colab_type":"code","outputId":"f06438ea-187b-424a-c871-cdcb0ecf4245","executionInfo":{"status":"ok","timestamp":1572781208851,"user_tz":-540,"elapsed":5117,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":255}},"source":["########################### Base check\n","#################################################################################\n","do_not_convert = ['category','datetime64[ns]','object']\n","for df in [train_df, test_df, building_df, train_weather_df, test_weather_df]:\n","    original = df.copy()\n","    df = reduce_mem_usage(df)\n","\n","    for col in list(df):\n","        if df[col].dtype.name not in do_not_convert:\n","            if (df[col]-original[col]).sum()!=0:\n","                df[col] = original[col]\n","                print('Bad transformation', col)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Mem. usage decreased to 289.19 Mb (53.1% reduction)\n","Bad transformation meter_reading\n","Mem. usage decreased to 596.49 Mb (53.1% reduction)\n","Mem. usage decreased to  0.02 Mb (60.5% reduction)\n","Mem. usage decreased to  3.07 Mb (68.1% reduction)\n","Bad transformation air_temperature\n","Bad transformation dew_temperature\n","Bad transformation sea_level_pressure\n","Bad transformation wind_speed\n","Mem. usage decreased to  6.08 Mb (68.1% reduction)\n","Bad transformation air_temperature\n","Bad transformation dew_temperature\n","Bad transformation sea_level_pressure\n","Bad transformation wind_speed\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"90uHRiEeJ6yk","colab_type":"code","outputId":"e4c7e25b-a33e-4f81-99c3-9546638befa5","executionInfo":{"status":"ok","timestamp":1572781209258,"user_tz":-540,"elapsed":5508,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":717}},"source":["########################### Data Check\n","#################################################################################\n","print('Main data:', list(train_df), train_df.info())\n","print('#'*20)\n","\n","print('Buildings data:',list(building_df), building_df.info())\n","print('#'*20)\n","\n","print('Weather data:',list(train_weather_df), train_weather_df.info())\n","print('#'*20)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 20216100 entries, 0 to 20216099\n","Data columns (total 4 columns):\n","building_id      int16\n","meter            int8\n","timestamp        datetime64[ns]\n","meter_reading    float64\n","dtypes: datetime64[ns](1), float64(1), int16(1), int8(1)\n","memory usage: 366.3 MB\n","Main data: ['building_id', 'meter', 'timestamp', 'meter_reading'] None\n","####################\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1449 entries, 0 to 1448\n","Data columns (total 6 columns):\n","site_id        1449 non-null int8\n","building_id    1449 non-null int16\n","primary_use    1449 non-null int8\n","square_feet    1449 non-null int32\n","year_built     1449 non-null int16\n","floor_count    1449 non-null int8\n","dtypes: int16(2), int32(1), int8(3)\n","memory usage: 15.7 KB\n","Buildings data: ['site_id', 'building_id', 'primary_use', 'square_feet', 'year_built', 'floor_count'] None\n","####################\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 139773 entries, 0 to 139772\n","Data columns (total 9 columns):\n","site_id               139773 non-null int8\n","timestamp             139773 non-null datetime64[ns]\n","air_temperature       139718 non-null float64\n","cloud_coverage        70600 non-null float16\n","dew_temperature       139660 non-null float64\n","precip_depth_1_hr     89484 non-null float16\n","sea_level_pressure    129155 non-null float64\n","wind_direction        133505 non-null float16\n","wind_speed            139469 non-null float64\n","dtypes: datetime64[ns](1), float16(3), float64(4), int8(1)\n","memory usage: 6.3 MB\n","Weather data: ['site_id', 'timestamp', 'air_temperature', 'cloud_coverage', 'dew_temperature', 'precip_depth_1_hr', 'sea_level_pressure', 'wind_direction', 'wind_speed'] None\n","####################\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"u7FZnDQtpPUk","colab_type":"code","colab":{}},"source":["########################### Export (using same names as in competition dataset)\n","#################################################################################\n","#Save data in google drive from Google Colab\n","\n","pass_input= \"/content/drive/My Drive/Kaggle/ashrae-energy/input/\"\n","\n","train_df.to_pickle(pass_input + 'train.pkl')\n","test_df.to_pickle(pass_input +'test.pkl')\n","\n","building_df.to_pickle(pass_input +'building_metadata.pkl')\n","\n","train_weather_df.to_pickle(pass_input +'weather_train.pkl')\n","test_weather_df.to_pickle(pass_input +'weather_test.pkl')\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RYsDi5_dCJTs","colab_type":"code","colab":{}},"source":["sample_df = load_sampledata()\n","sample_df.to_pickle(pass_input +'sample_submission.pkl')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_ts5I-KwClhT","colab_type":"code","outputId":"e114ce29-420e-4b48-e3c7-207268b72263","executionInfo":{"status":"ok","timestamp":1572781252792,"user_tz":-540,"elapsed":49013,"user":{"displayName":"Higashi Yutaka","photoUrl":"","userId":"16641266156000464027"}},"colab":{"base_uri":"https://localhost:8080/","height":419}},"source":["sample_df"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>row_id</th>\n","      <th>meter_reading</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>41697595</th>\n","      <td>41697595</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>41697596</th>\n","      <td>41697596</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>41697597</th>\n","      <td>41697597</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>41697598</th>\n","      <td>41697598</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>41697599</th>\n","      <td>41697599</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>41697600 rows × 2 columns</p>\n","</div>"],"text/plain":["            row_id  meter_reading\n","0                0              0\n","1                1              0\n","2                2              0\n","3                3              0\n","4                4              0\n","...            ...            ...\n","41697595  41697595              0\n","41697596  41697596              0\n","41697597  41697597              0\n","41697598  41697598              0\n","41697599  41697599              0\n","\n","[41697600 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"QNMP7LchtZJk","colab_type":"code","colab":{}},"source":["########################### Playing around\n","#################################################################################"],"execution_count":0,"outputs":[]}]}